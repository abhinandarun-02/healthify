generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  Doctor        Doctor?
  Patient       Patient?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Doctor {
  id           Int           @id @default(autoincrement())
  name         String
  username     String        @unique
  speciality   String
  image        String?
  location     String
  experience   Int
  verified     Boolean
  languages    String[]
  rating       Float
  reviews      Int
  endorsements Int
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?       @unique
  Appointment  Appointment[]

  @@index([username])
}

model Patient {
  id          Int           @id @default(autoincrement())
  name        String?
  username    String?       @unique
  height      Float?
  weight      Float?
  address     String?
  bloodType   String?
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @unique
  Appointment Appointment[]
}

model Appointment {
  id String @id @default(uuid())

  patientId Int
  patient   Patient @relation(fields: [patientId], references: [id])
  doctorId  Int
  doctor    Doctor  @relation(fields: [doctorId], references: [id])

  date      DateTime
  slot      String
  amount    Float
  completed Boolean  @default(false)
  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
  @@index([doctorId])
}
